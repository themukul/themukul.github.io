{"version":3,"sources":["utils/common.js","components/ResultsTable/index.js","components/TrendsChart/index.js","components/DateRangePicker/index.js","components/Dashboard/index.js","App.js","serviceWorker.js","store/configureStore.js","actions/actionConstants.js","reducers/fetchReducer.js","reducers/index.js","actions/fetchActions.js","index.js"],"names":["getECPM","revenue","impressions","columns","title","dataIndex","key","render","timestamp","react_default","a","createElement","tag","color","sorter","b","d1","Date","d2","eCPM","getDataSource","data","dataSource","map","obj","index","Object","objectSpread","concat","sort","ResultsTable","props","table","pagination","showSizeChanger","pageSizeOptions","defaultPageSize","uv","name","TrendsChart","_ref","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","RangePicker","DatePicker","disabledDate","current","moment","endOf","DateRangePicker","onChange","allowClear","Dashboard","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","date","dateString","console","log","setState","selectedRange","state","nextProps","prevState","fetchReducer","_this$state","isLoading","renderData","length","filter","rangeStart","rangeEnd","row","className","col","lg","span","offset","sm","xs","card","loading","DateRangePicker_DateRangePicker","TrendsChart_TrendsChart","ResultsTable_ResultsTable","React","Component","connect","store","App","onOffline","notification","message","description","duration","window","addEventListener","removeEventListener","components_Dashboard","Boolean","location","hostname","match","initialState","ACTION_CONSTANTS","defaultState","isSuccess","isError","error","rootReducer","combineReducers","arguments","undefined","action","payload","fetchDataError","createStore","applyMiddleware","thunk","dispatch","Axios","method","url","then","response","catch","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88942dcf.chunk.js","sourcesContent":["export const getECPM = (revenue, impressions) => ((revenue / impressions) * 1000);\n","import React from 'react';\n\nimport { getECPM } from '../../utils/common';\n\nimport { Table, Tag } from 'antd';\n\nconst columns = [\n  {\n    title: 'Timestamp',\n    dataIndex: 'timestamp',\n    key: 'timestamp',\n    render: timestamp => <Tag color=\"green\">{timestamp}</Tag>,\n    sorter: (a, b) => {\n      const d1 = new Date(a.timestamp);\n      const d2 = new Date(b.timestamp);\n      if (d1 > d2) {\n        return -1;\n      }\n      if (d1 < d2) {\n        return 1;\n      }\n      return 0;\n    }\n  },\n  {\n    title: 'Game',\n    dataIndex: 'game',\n    key: 'game',\n  },\n  {\n    title: 'Revenue',\n    dataIndex: 'revenue',\n    key: 'revenue',\n    sorter: (a, b) => a.revenue - b.revenue,\n  },\n  {\n    title: 'Impressions',\n    dataIndex: 'impressions',\n    key: 'impressions',\n    sorter: (a, b) => a.impressions - b.impressions,\n  },\n  {\n    title: 'eCPM',\n    dataIndex: 'eCPM',\n    key: 'eCPM',\n    sorter: (a, b) => a.eCPM - b.eCPM,\n  },\n];\n\nconst getDataSource = data => {\n  const dataSource = (data || []).map((obj, index) => ({\n    ...obj,\n    key: `table_data_row_${index}`,\n    eCPM: getECPM(obj.revenue, obj.impressions)\n  }));\n\n  dataSource.sort((a, b) => {\n    const d1 = new Date(a.timestamp);\n    const d2 = new Date(b.timestamp);\n    if (d1 > d2) {\n      return -1;\n    }\n    if (d1 < d2) {\n      return 1;\n    }\n    return 0;\n  });\n\n  return dataSource;\n};\n\nexport const ResultsTable = props => (\n  <Table\n    dataSource={getDataSource(props.data)}\n    columns={columns}\n    pagination={{\n      showSizeChanger: true,\n      pageSizeOptions: [5, 10],\n      defaultPageSize: 5\n    }}\n  />\n);\n","import React from 'react';\n\nimport { getECPM } from '../../utils/common';\n\nimport {\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n} from 'recharts';\n\nimport './styles.css';\n\nconst getDataSource = data => {\n  return (data || []).map(obj => ({\n    timestamp: obj.timestamp,\n    eCPM: getECPM(obj.revenue, obj.impressions),\n    uv: getECPM(obj.revenue, obj.impressions),\n    name: obj.timestamp,\n  }));\n};\n\nexport const TrendsChart = ({ data }) => (\n  <LineChart\n    width={730}\n    height={250}\n    data={getDataSource(data)}\n    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n  >\n    <CartesianGrid strokeDasharray=\"3 3\" />\n    <XAxis dataKey=\"timestamp\" />\n    <YAxis dataKey=\"eCPM\" />\n    <Tooltip />\n    <Legend />\n    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n  </LineChart>\n);\n","import React from 'react';\n\nimport moment from 'moment';\n\nimport { DatePicker } from 'antd';\nconst { RangePicker } = DatePicker;\n\nconst disabledDate = current => {\n  // Can not select days before today and today\n  return current && current > moment().endOf('day');\n}\n\nexport const DateRangePicker = ({ onChange }) => <RangePicker onChange={onChange} allowClear disabledDate={disabledDate} />;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { ResultsTable } from '../ResultsTable';\nimport { TrendsChart } from '../TrendsChart';\nimport { DateRangePicker } from '../DateRangePicker';\n\nimport { Card } from 'antd';\nimport { Row, Col } from 'antd';\n\nimport './styles.css';\n\nclass Dashboard extends React.Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return nextProps.fetchReducer;\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedRange: []\n    };\n  }\n  onChange = (date, dateString) => {\n    console.log(dateString);\n    this.setState({\n      selectedRange: dateString\n    });\n  }\n  render() {\n    const { isLoading, selectedRange } = this.state;\n    let { data: renderData } = this.state;\n    if (selectedRange.length === 2 && selectedRange[0].length && selectedRange[1].length) {\n      renderData = (this.state.data || []).filter(obj => {\n        const date = new Date(obj.timestamp);\n        const rangeStart = new Date(selectedRange[0]);\n        const rangeEnd = new Date(selectedRange[1]);\n\n        return date > rangeStart && date < rangeEnd;\n      });\n    }\n\n    return (\n      <div>\n        <Row>\n          <div className=\"separator_bg\" />\n          <Col\n            lg={{ span: 10, offset: 7 }}\n            sm={{ span: 24, offset: 0 }}\n            xs={{ span: 24, offset: 0 }}\n          >\n            <Card title=\"Select Date\" loading={isLoading} className=\"card_base\">\n              <DateRangePicker onChange={this.onChange} />\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col\n            lg={{ span: 16, offset: 4 }}\n            sm={{ span: 24, offset: 0 }}\n            xs={{ span: 24, offset: 0 }}\n          >\n            <Card title=\"eCPM Trends\" loading={isLoading} className=\"card_base\">\n              {(renderData || []).length ? <TrendsChart data={renderData} /> : <span> No data kindly reset or change date range! </span>}\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col\n            lg={{ span: 20, offset: 2 }}\n            sm={{ span: 24, offset: 0 }}\n            xs={{ span: 24, offset: 0 }}\n          >\n            <Card title=\"Results\" loading={isLoading} className=\"card_base\">\n              <ResultsTable data={renderData} />\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  };\n}\n\nfunction mapStateToProps(store) {\n  return {\n    fetchReducer: store.fetchReducer\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n","import React from 'react';\nimport Dashboard from './components/Dashboard';\n\nimport 'antd/dist/antd.css';\nimport { notification } from 'antd';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    window.addEventListener('offline', this.onOffline);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('offline', this.onOffline);\n  }\n  onOffline = () => {\n    notification['error']({\n      message: 'No Internet',\n      description:\n        'It seems like your internet is either to slow or disconnected. Kindly refresh!',\n      duration: 0\n    });\n  }\n  render() {\n    return <Dashboard />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport { rootReducer } from '../reducers/index';\nimport thunk from 'redux-thunk';\n\nexport const configureStore = initialState => {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(thunk)\n  );\n};\n","export const ACTION_CONSTANTS = {\n  SUCCESS_FETCHING_DATA: 'SUCCESS_FETCHING_DATA',\n  ERROR_FETCHING_DATA: 'ERROR_FETCHING_DATA',\n  FETCHING_DATA: 'FETCHING_DATA'\n};\n","import { ACTION_CONSTANTS } from '../actions/actionConstants';\n\nconst defaultState = {\n  isSuccess: false,\n  isError: false,\n  isLoading: false,\n  data: null,\n  error: null\n};\n\nexport const fetchReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case ACTION_CONSTANTS.SUCCESS_FETCHING_DATA:\n      return {\n        ...defaultState,\n        isSuccess: true,\n        data: action.payload\n      };\n    case ACTION_CONSTANTS.ERROR_FETCHING_DATA:\n      return {\n        ...defaultState,\n        isError: true,\n        error: action.error\n      };\n    case ACTION_CONSTANTS.FETCHING_DATA:\n      return {\n        ...defaultState,\n        isLoading: true\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { fetchReducer } from './fetchReducer';\n\nexport const rootReducer = combineReducers({ fetchReducer });\n","import Axios from 'axios';\nimport { ACTION_CONSTANTS } from './actionConstants';\n\nexport const fetchDataSuccess = payload => ({\n  type: ACTION_CONSTANTS.SUCCESS_FETCHING_DATA,\n  payload\n});\n\nexport const fetchDataError = error => ({\n  type: ACTION_CONSTANTS.ERROR_FETCHING_DATA,\n  error\n});\n\nexport const fetchingData = () => ({\n  type: ACTION_CONSTANTS.FETCHING_DATA\n});\n\nexport const fetchDataAction = () => {\n  return dispatch => {\n    dispatch(fetchingData());\n    return Axios({\n      method: 'GET',\n      url: 'http://www.mocky.io/v2/5cd04a20320000442200fc10'\n    })\n      .then(response => {\n        if (!response) {\n          dispatch(fetchDataError('No data found!'));\n        } else {\n          const { data } = response;\n          dispatch(fetchDataSuccess(data));\n        }\n      })\n      .catch(error => {\n        dispatch(fetchDataError('Error in API'));\n      });\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { configureStore } from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport { fetchDataAction } from './actions/fetchActions';\n\nconst store = configureStore();\n\nstore.dispatch(fetchDataAction());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}